class Solution {
public:
    void addVectors(vector<int>& a, vector<int>& b){
        for(int i=0; i<a.size(); i++){
            a[i] = a[i] + b[i];
        }
    }

    vector<int> countSubTrees(int n, vector<vector<int>>& edges, string labels) {
       if(n==1){
            return {labels[0]-'a'};
        }
        vector<vector<int>> countMap(n, vector<int>(26, 0));
        vector<unordered_set<int>> adjacentNodes(n, unordered_set<int>());
        vector<int> result;
        for(int i=0; i<edges.size(); i++){
            adjacentNodes[edges[i][0]].insert(edges[i][1]);
            adjacentNodes[edges[i][1]].insert(edges[i][0]);
        }
        queue<int> q;
        countMap[0][labels[0]-'a']++;
        for(int i=1; i<n; i++){
            if(adjacentNodes[i].size()==1){
                q.push(i);
            }
            countMap[i][labels[i]-'a']++;
        }
        while(!q.empty()){
            int top = q.front();
            q.pop();
            for(int node: adjacentNodes[top]){
                adjacentNodes[node].erase(top);
                addVectors(countMap[node], countMap[top]);
                if(node!=0 && adjacentNodes[node].size()==1){
                    q.push(node);
                } 
            }
        }
        for(int i=0; i<n; i++){
            result.push_back(countMap[i][labels[i]-'a']);
        }
        return result;
    } 
};
